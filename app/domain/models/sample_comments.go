// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SampleComment is an object representing the database table.
type SampleComment struct {
	ID       []byte      `boil:"id" json:"id" toml:"id" yaml:"id"`
	SampleID []byte      `boil:"sample_id" json:"sample_id" toml:"sample_id" yaml:"sample_id"`
	Content  null.String `boil:"content" json:"content,omitempty" toml:"content" yaml:"content,omitempty"`

	R *sampleCommentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sampleCommentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SampleCommentColumns = struct {
	ID       string
	SampleID string
	Content  string
}{
	ID:       "id",
	SampleID: "sample_id",
	Content:  "content",
}

var SampleCommentTableColumns = struct {
	ID       string
	SampleID string
	Content  string
}{
	ID:       "sample_comments.id",
	SampleID: "sample_comments.sample_id",
	Content:  "sample_comments.content",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SampleCommentWhere = struct {
	ID       whereHelper__byte
	SampleID whereHelper__byte
	Content  whereHelpernull_String
}{
	ID:       whereHelper__byte{field: "`sample_comments`.`id`"},
	SampleID: whereHelper__byte{field: "`sample_comments`.`sample_id`"},
	Content:  whereHelpernull_String{field: "`sample_comments`.`content`"},
}

// SampleCommentRels is where relationship names are stored.
var SampleCommentRels = struct {
	Sample string
}{
	Sample: "Sample",
}

// sampleCommentR is where relationships are stored.
type sampleCommentR struct {
	Sample *Sample `boil:"Sample" json:"Sample" toml:"Sample" yaml:"Sample"`
}

// NewStruct creates a new relationship struct
func (*sampleCommentR) NewStruct() *sampleCommentR {
	return &sampleCommentR{}
}

// sampleCommentL is where Load methods for each relationship are stored.
type sampleCommentL struct{}

var (
	sampleCommentAllColumns            = []string{"id", "sample_id", "content"}
	sampleCommentColumnsWithoutDefault = []string{"id", "sample_id", "content"}
	sampleCommentColumnsWithDefault    = []string{}
	sampleCommentPrimaryKeyColumns     = []string{"id"}
	sampleCommentGeneratedColumns      = []string{}
)

type (
	// SampleCommentSlice is an alias for a slice of pointers to SampleComment.
	// This should almost always be used instead of []SampleComment.
	SampleCommentSlice []*SampleComment
	// SampleCommentHook is the signature for custom SampleComment hook methods
	SampleCommentHook func(context.Context, boil.ContextExecutor, *SampleComment) error

	sampleCommentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sampleCommentType                 = reflect.TypeOf(&SampleComment{})
	sampleCommentMapping              = queries.MakeStructMapping(sampleCommentType)
	sampleCommentPrimaryKeyMapping, _ = queries.BindMapping(sampleCommentType, sampleCommentMapping, sampleCommentPrimaryKeyColumns)
	sampleCommentInsertCacheMut       sync.RWMutex
	sampleCommentInsertCache          = make(map[string]insertCache)
	sampleCommentUpdateCacheMut       sync.RWMutex
	sampleCommentUpdateCache          = make(map[string]updateCache)
	sampleCommentUpsertCacheMut       sync.RWMutex
	sampleCommentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sampleCommentAfterSelectHooks []SampleCommentHook

var sampleCommentBeforeInsertHooks []SampleCommentHook
var sampleCommentAfterInsertHooks []SampleCommentHook

var sampleCommentBeforeUpdateHooks []SampleCommentHook
var sampleCommentAfterUpdateHooks []SampleCommentHook

var sampleCommentBeforeDeleteHooks []SampleCommentHook
var sampleCommentAfterDeleteHooks []SampleCommentHook

var sampleCommentBeforeUpsertHooks []SampleCommentHook
var sampleCommentAfterUpsertHooks []SampleCommentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SampleComment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleCommentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SampleComment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleCommentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SampleComment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleCommentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SampleComment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleCommentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SampleComment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleCommentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SampleComment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleCommentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SampleComment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleCommentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SampleComment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleCommentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SampleComment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleCommentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSampleCommentHook registers your hook function for all future operations.
func AddSampleCommentHook(hookPoint boil.HookPoint, sampleCommentHook SampleCommentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sampleCommentAfterSelectHooks = append(sampleCommentAfterSelectHooks, sampleCommentHook)
	case boil.BeforeInsertHook:
		sampleCommentBeforeInsertHooks = append(sampleCommentBeforeInsertHooks, sampleCommentHook)
	case boil.AfterInsertHook:
		sampleCommentAfterInsertHooks = append(sampleCommentAfterInsertHooks, sampleCommentHook)
	case boil.BeforeUpdateHook:
		sampleCommentBeforeUpdateHooks = append(sampleCommentBeforeUpdateHooks, sampleCommentHook)
	case boil.AfterUpdateHook:
		sampleCommentAfterUpdateHooks = append(sampleCommentAfterUpdateHooks, sampleCommentHook)
	case boil.BeforeDeleteHook:
		sampleCommentBeforeDeleteHooks = append(sampleCommentBeforeDeleteHooks, sampleCommentHook)
	case boil.AfterDeleteHook:
		sampleCommentAfterDeleteHooks = append(sampleCommentAfterDeleteHooks, sampleCommentHook)
	case boil.BeforeUpsertHook:
		sampleCommentBeforeUpsertHooks = append(sampleCommentBeforeUpsertHooks, sampleCommentHook)
	case boil.AfterUpsertHook:
		sampleCommentAfterUpsertHooks = append(sampleCommentAfterUpsertHooks, sampleCommentHook)
	}
}

// One returns a single sampleComment record from the query.
func (q sampleCommentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SampleComment, error) {
	o := &SampleComment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sample_comments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SampleComment records from the query.
func (q sampleCommentQuery) All(ctx context.Context, exec boil.ContextExecutor) (SampleCommentSlice, error) {
	var o []*SampleComment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SampleComment slice")
	}

	if len(sampleCommentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SampleComment records in the query.
func (q sampleCommentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sample_comments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sampleCommentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sample_comments exists")
	}

	return count > 0, nil
}

// Sample pointed to by the foreign key.
func (o *SampleComment) Sample(mods ...qm.QueryMod) sampleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.SampleID),
	}

	queryMods = append(queryMods, mods...)

	query := Samples(queryMods...)
	queries.SetFrom(query.Query, "`samples`")

	return query
}

// LoadSample allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sampleCommentL) LoadSample(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSampleComment interface{}, mods queries.Applicator) error {
	var slice []*SampleComment
	var object *SampleComment

	if singular {
		object = maybeSampleComment.(*SampleComment)
	} else {
		slice = *maybeSampleComment.(*[]*SampleComment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sampleCommentR{}
		}
		if !queries.IsNil(object.SampleID) {
			args = append(args, object.SampleID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sampleCommentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SampleID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SampleID) {
				args = append(args, obj.SampleID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`samples`),
		qm.WhereIn(`samples.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Sample")
	}

	var resultSlice []*Sample
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Sample")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for samples")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for samples")
	}

	if len(sampleCommentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sample = foreign
		if foreign.R == nil {
			foreign.R = &sampleR{}
		}
		foreign.R.SampleComments = append(foreign.R.SampleComments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SampleID, foreign.ID) {
				local.R.Sample = foreign
				if foreign.R == nil {
					foreign.R = &sampleR{}
				}
				foreign.R.SampleComments = append(foreign.R.SampleComments, local)
				break
			}
		}
	}

	return nil
}

// SetSample of the sampleComment to the related item.
// Sets o.R.Sample to related.
// Adds o to related.R.SampleComments.
func (o *SampleComment) SetSample(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Sample) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sample_comments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"sample_id"}),
		strmangle.WhereClause("`", "`", 0, sampleCommentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SampleID, related.ID)
	if o.R == nil {
		o.R = &sampleCommentR{
			Sample: related,
		}
	} else {
		o.R.Sample = related
	}

	if related.R == nil {
		related.R = &sampleR{
			SampleComments: SampleCommentSlice{o},
		}
	} else {
		related.R.SampleComments = append(related.R.SampleComments, o)
	}

	return nil
}

// SampleComments retrieves all the records using an executor.
func SampleComments(mods ...qm.QueryMod) sampleCommentQuery {
	mods = append(mods, qm.From("`sample_comments`"))
	return sampleCommentQuery{NewQuery(mods...)}
}

// FindSampleComment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSampleComment(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*SampleComment, error) {
	sampleCommentObj := &SampleComment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sample_comments` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sampleCommentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sample_comments")
	}

	if err = sampleCommentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sampleCommentObj, err
	}

	return sampleCommentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SampleComment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sample_comments provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sampleCommentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sampleCommentInsertCacheMut.RLock()
	cache, cached := sampleCommentInsertCache[key]
	sampleCommentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sampleCommentAllColumns,
			sampleCommentColumnsWithDefault,
			sampleCommentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sampleCommentType, sampleCommentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sampleCommentType, sampleCommentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sample_comments` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sample_comments` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sample_comments` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sampleCommentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sample_comments")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sample_comments")
	}

CacheNoHooks:
	if !cached {
		sampleCommentInsertCacheMut.Lock()
		sampleCommentInsertCache[key] = cache
		sampleCommentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SampleComment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SampleComment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sampleCommentUpdateCacheMut.RLock()
	cache, cached := sampleCommentUpdateCache[key]
	sampleCommentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sampleCommentAllColumns,
			sampleCommentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sample_comments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sample_comments` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sampleCommentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sampleCommentType, sampleCommentMapping, append(wl, sampleCommentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sample_comments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sample_comments")
	}

	if !cached {
		sampleCommentUpdateCacheMut.Lock()
		sampleCommentUpdateCache[key] = cache
		sampleCommentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sampleCommentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sample_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sample_comments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SampleCommentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sampleCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sample_comments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sampleCommentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sampleComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sampleComment")
	}
	return rowsAff, nil
}

var mySQLSampleCommentUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SampleComment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sample_comments provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sampleCommentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSampleCommentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sampleCommentUpsertCacheMut.RLock()
	cache, cached := sampleCommentUpsertCache[key]
	sampleCommentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sampleCommentAllColumns,
			sampleCommentColumnsWithDefault,
			sampleCommentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sampleCommentAllColumns,
			sampleCommentPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sample_comments, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sample_comments`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sample_comments` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sampleCommentType, sampleCommentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sampleCommentType, sampleCommentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sample_comments")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sampleCommentType, sampleCommentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sample_comments")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sample_comments")
	}

CacheNoHooks:
	if !cached {
		sampleCommentUpsertCacheMut.Lock()
		sampleCommentUpsertCache[key] = cache
		sampleCommentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SampleComment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SampleComment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SampleComment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sampleCommentPrimaryKeyMapping)
	sql := "DELETE FROM `sample_comments` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sample_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sample_comments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sampleCommentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sampleCommentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sample_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sample_comments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SampleCommentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sampleCommentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sampleCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sample_comments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sampleCommentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sampleComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sample_comments")
	}

	if len(sampleCommentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SampleComment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSampleComment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SampleCommentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SampleCommentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sampleCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sample_comments`.* FROM `sample_comments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sampleCommentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SampleCommentSlice")
	}

	*o = slice

	return nil
}

// SampleCommentExists checks if the SampleComment row exists.
func SampleCommentExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sample_comments` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sample_comments exists")
	}

	return exists, nil
}
