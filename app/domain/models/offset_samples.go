// Code generated by SQLBoiler 4.9.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OffsetSample is an object representing the database table.
type OffsetSample struct {
	Offset uint `boil:"offset" json:"offset" toml:"offset" yaml:"offset"`

	R *offsetSampleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L offsetSampleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OffsetSampleColumns = struct {
	Offset string
}{
	Offset: "offset",
}

var OffsetSampleTableColumns = struct {
	Offset string
}{
	Offset: "offset_samples.offset",
}

// Generated where

type whereHelperuint struct{ field string }

func (w whereHelperuint) EQ(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint) NEQ(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint) LT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint) LTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint) GT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint) GTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint) IN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint) NIN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var OffsetSampleWhere = struct {
	Offset whereHelperuint
}{
	Offset: whereHelperuint{field: "`offset_samples`.`offset`"},
}

// OffsetSampleRels is where relationship names are stored.
var OffsetSampleRels = struct {
}{}

// offsetSampleR is where relationships are stored.
type offsetSampleR struct {
}

// NewStruct creates a new relationship struct
func (*offsetSampleR) NewStruct() *offsetSampleR {
	return &offsetSampleR{}
}

// offsetSampleL is where Load methods for each relationship are stored.
type offsetSampleL struct{}

var (
	offsetSampleAllColumns            = []string{"offset"}
	offsetSampleColumnsWithoutDefault = []string{"offset"}
	offsetSampleColumnsWithDefault    = []string{}
	offsetSamplePrimaryKeyColumns     = []string{"offset"}
	offsetSampleGeneratedColumns      = []string{}
)

type (
	// OffsetSampleSlice is an alias for a slice of pointers to OffsetSample.
	// This should almost always be used instead of []OffsetSample.
	OffsetSampleSlice []*OffsetSample
	// OffsetSampleHook is the signature for custom OffsetSample hook methods
	OffsetSampleHook func(context.Context, boil.ContextExecutor, *OffsetSample) error

	offsetSampleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	offsetSampleType                 = reflect.TypeOf(&OffsetSample{})
	offsetSampleMapping              = queries.MakeStructMapping(offsetSampleType)
	offsetSamplePrimaryKeyMapping, _ = queries.BindMapping(offsetSampleType, offsetSampleMapping, offsetSamplePrimaryKeyColumns)
	offsetSampleInsertCacheMut       sync.RWMutex
	offsetSampleInsertCache          = make(map[string]insertCache)
	offsetSampleUpdateCacheMut       sync.RWMutex
	offsetSampleUpdateCache          = make(map[string]updateCache)
	offsetSampleUpsertCacheMut       sync.RWMutex
	offsetSampleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var offsetSampleAfterSelectHooks []OffsetSampleHook

var offsetSampleBeforeInsertHooks []OffsetSampleHook
var offsetSampleAfterInsertHooks []OffsetSampleHook

var offsetSampleBeforeUpdateHooks []OffsetSampleHook
var offsetSampleAfterUpdateHooks []OffsetSampleHook

var offsetSampleBeforeDeleteHooks []OffsetSampleHook
var offsetSampleAfterDeleteHooks []OffsetSampleHook

var offsetSampleBeforeUpsertHooks []OffsetSampleHook
var offsetSampleAfterUpsertHooks []OffsetSampleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OffsetSample) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range offsetSampleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OffsetSample) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range offsetSampleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OffsetSample) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range offsetSampleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OffsetSample) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range offsetSampleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OffsetSample) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range offsetSampleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OffsetSample) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range offsetSampleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OffsetSample) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range offsetSampleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OffsetSample) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range offsetSampleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OffsetSample) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range offsetSampleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOffsetSampleHook registers your hook function for all future operations.
func AddOffsetSampleHook(hookPoint boil.HookPoint, offsetSampleHook OffsetSampleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		offsetSampleAfterSelectHooks = append(offsetSampleAfterSelectHooks, offsetSampleHook)
	case boil.BeforeInsertHook:
		offsetSampleBeforeInsertHooks = append(offsetSampleBeforeInsertHooks, offsetSampleHook)
	case boil.AfterInsertHook:
		offsetSampleAfterInsertHooks = append(offsetSampleAfterInsertHooks, offsetSampleHook)
	case boil.BeforeUpdateHook:
		offsetSampleBeforeUpdateHooks = append(offsetSampleBeforeUpdateHooks, offsetSampleHook)
	case boil.AfterUpdateHook:
		offsetSampleAfterUpdateHooks = append(offsetSampleAfterUpdateHooks, offsetSampleHook)
	case boil.BeforeDeleteHook:
		offsetSampleBeforeDeleteHooks = append(offsetSampleBeforeDeleteHooks, offsetSampleHook)
	case boil.AfterDeleteHook:
		offsetSampleAfterDeleteHooks = append(offsetSampleAfterDeleteHooks, offsetSampleHook)
	case boil.BeforeUpsertHook:
		offsetSampleBeforeUpsertHooks = append(offsetSampleBeforeUpsertHooks, offsetSampleHook)
	case boil.AfterUpsertHook:
		offsetSampleAfterUpsertHooks = append(offsetSampleAfterUpsertHooks, offsetSampleHook)
	}
}

// OneG returns a single offsetSample record from the query using the global executor.
func (q offsetSampleQuery) OneG(ctx context.Context) (*OffsetSample, error) {
	return q.One(ctx, boil.GetContextDB())
}

// OneGP returns a single offsetSample record from the query using the global executor, and panics on error.
func (q offsetSampleQuery) OneGP(ctx context.Context) *OffsetSample {
	o, err := q.One(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single offsetSample record from the query, and panics on error.
func (q offsetSampleQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *OffsetSample {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single offsetSample record from the query.
func (q offsetSampleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OffsetSample, error) {
	o := &OffsetSample{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for offset_samples")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all OffsetSample records from the query using the global executor.
func (q offsetSampleQuery) AllG(ctx context.Context) (OffsetSampleSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// AllGP returns all OffsetSample records from the query using the global executor, and panics on error.
func (q offsetSampleQuery) AllGP(ctx context.Context) OffsetSampleSlice {
	o, err := q.All(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all OffsetSample records from the query, and panics on error.
func (q offsetSampleQuery) AllP(ctx context.Context, exec boil.ContextExecutor) OffsetSampleSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all OffsetSample records from the query.
func (q offsetSampleQuery) All(ctx context.Context, exec boil.ContextExecutor) (OffsetSampleSlice, error) {
	var o []*OffsetSample

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OffsetSample slice")
	}

	if len(offsetSampleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all OffsetSample records in the query using the global executor
func (q offsetSampleQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// CountGP returns the count of all OffsetSample records in the query using the global executor, and panics on error.
func (q offsetSampleQuery) CountGP(ctx context.Context) int64 {
	c, err := q.Count(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all OffsetSample records in the query, and panics on error.
func (q offsetSampleQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all OffsetSample records in the query.
func (q offsetSampleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count offset_samples rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q offsetSampleQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q offsetSampleQuery) ExistsGP(ctx context.Context) bool {
	e, err := q.Exists(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q offsetSampleQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q offsetSampleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if offset_samples exists")
	}

	return count > 0, nil
}

// OffsetSamples retrieves all the records using an executor.
func OffsetSamples(mods ...qm.QueryMod) offsetSampleQuery {
	mods = append(mods, qm.From("`offset_samples`"))
	return offsetSampleQuery{NewQuery(mods...)}
}

// FindOffsetSampleG retrieves a single record by ID.
func FindOffsetSampleG(ctx context.Context, offset uint, selectCols ...string) (*OffsetSample, error) {
	return FindOffsetSample(ctx, boil.GetContextDB(), offset, selectCols...)
}

// FindOffsetSampleP retrieves a single record by ID with an executor, and panics on error.
func FindOffsetSampleP(ctx context.Context, exec boil.ContextExecutor, offset uint, selectCols ...string) *OffsetSample {
	retobj, err := FindOffsetSample(ctx, exec, offset, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindOffsetSampleGP retrieves a single record by ID, and panics on error.
func FindOffsetSampleGP(ctx context.Context, offset uint, selectCols ...string) *OffsetSample {
	retobj, err := FindOffsetSample(ctx, boil.GetContextDB(), offset, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindOffsetSample retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOffsetSample(ctx context.Context, exec boil.ContextExecutor, offset uint, selectCols ...string) (*OffsetSample, error) {
	offsetSampleObj := &OffsetSample{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `offset_samples` where `offset`=?", sel,
	)

	q := queries.Raw(query, offset)

	err := q.Bind(ctx, exec, offsetSampleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from offset_samples")
	}

	if err = offsetSampleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return offsetSampleObj, err
	}

	return offsetSampleObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *OffsetSample) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *OffsetSample) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *OffsetSample) InsertGP(ctx context.Context, columns boil.Columns) {
	if err := o.Insert(ctx, boil.GetContextDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OffsetSample) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no offset_samples provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(offsetSampleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	offsetSampleInsertCacheMut.RLock()
	cache, cached := offsetSampleInsertCache[key]
	offsetSampleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			offsetSampleAllColumns,
			offsetSampleColumnsWithDefault,
			offsetSampleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(offsetSampleType, offsetSampleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(offsetSampleType, offsetSampleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `offset_samples` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `offset_samples` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `offset_samples` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, offsetSamplePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into offset_samples")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Offset,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for offset_samples")
	}

CacheNoHooks:
	if !cached {
		offsetSampleInsertCacheMut.Lock()
		offsetSampleInsertCache[key] = cache
		offsetSampleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single OffsetSample record using the global executor.
// See Update for more documentation.
func (o *OffsetSample) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// UpdateP uses an executor to update the OffsetSample, and panics on error.
// See Update for more documentation.
func (o *OffsetSample) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single OffsetSample record using the global executor. Panics on error.
// See Update for more documentation.
func (o *OffsetSample) UpdateGP(ctx context.Context, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, boil.GetContextDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the OffsetSample.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OffsetSample) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	offsetSampleUpdateCacheMut.RLock()
	cache, cached := offsetSampleUpdateCache[key]
	offsetSampleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			offsetSampleAllColumns,
			offsetSamplePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update offset_samples, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `offset_samples` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, offsetSamplePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(offsetSampleType, offsetSampleMapping, append(wl, offsetSamplePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update offset_samples row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for offset_samples")
	}

	if !cached {
		offsetSampleUpdateCacheMut.Lock()
		offsetSampleUpdateCache[key] = cache
		offsetSampleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q offsetSampleQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q offsetSampleQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q offsetSampleQuery) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q offsetSampleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for offset_samples")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for offset_samples")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OffsetSampleSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o OffsetSampleSlice) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o OffsetSampleSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OffsetSampleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), offsetSamplePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `offset_samples` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, offsetSamplePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in offsetSample slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all offsetSample")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *OffsetSample) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *OffsetSample) UpsertGP(ctx context.Context, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *OffsetSample) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLOffsetSampleUniqueColumns = []string{
	"offset",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OffsetSample) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no offset_samples provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(offsetSampleColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOffsetSampleUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	offsetSampleUpsertCacheMut.RLock()
	cache, cached := offsetSampleUpsertCache[key]
	offsetSampleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			offsetSampleAllColumns,
			offsetSampleColumnsWithDefault,
			offsetSampleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			offsetSampleAllColumns,
			offsetSamplePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert offset_samples, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`offset_samples`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `offset_samples` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(offsetSampleType, offsetSampleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(offsetSampleType, offsetSampleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for offset_samples")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(offsetSampleType, offsetSampleMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for offset_samples")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for offset_samples")
	}

CacheNoHooks:
	if !cached {
		offsetSampleUpsertCacheMut.Lock()
		offsetSampleUpsertCache[key] = cache
		offsetSampleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single OffsetSample record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *OffsetSample) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// DeleteP deletes a single OffsetSample record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *OffsetSample) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single OffsetSample record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *OffsetSample) DeleteGP(ctx context.Context) int64 {
	rowsAff, err := o.Delete(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single OffsetSample record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OffsetSample) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OffsetSample provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), offsetSamplePrimaryKeyMapping)
	sql := "DELETE FROM `offset_samples` WHERE `offset`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from offset_samples")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for offset_samples")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q offsetSampleQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q offsetSampleQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows, and panics on error.
func (q offsetSampleQuery) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := q.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q offsetSampleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no offsetSampleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from offset_samples")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for offset_samples")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OffsetSampleSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o OffsetSampleSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o OffsetSampleSlice) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := o.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OffsetSampleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(offsetSampleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), offsetSamplePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `offset_samples` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, offsetSamplePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from offsetSample slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for offset_samples")
	}

	if len(offsetSampleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *OffsetSample) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no OffsetSample provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *OffsetSample) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *OffsetSample) ReloadGP(ctx context.Context) {
	if err := o.Reload(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OffsetSample) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOffsetSample(ctx, exec, o.Offset)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OffsetSampleSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty OffsetSampleSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *OffsetSampleSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *OffsetSampleSlice) ReloadAllGP(ctx context.Context) {
	if err := o.ReloadAll(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OffsetSampleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OffsetSampleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), offsetSamplePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `offset_samples`.* FROM `offset_samples` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, offsetSamplePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OffsetSampleSlice")
	}

	*o = slice

	return nil
}

// OffsetSampleExistsG checks if the OffsetSample row exists.
func OffsetSampleExistsG(ctx context.Context, offset uint) (bool, error) {
	return OffsetSampleExists(ctx, boil.GetContextDB(), offset)
}

// OffsetSampleExistsP checks if the OffsetSample row exists. Panics on error.
func OffsetSampleExistsP(ctx context.Context, exec boil.ContextExecutor, offset uint) bool {
	e, err := OffsetSampleExists(ctx, exec, offset)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// OffsetSampleExistsGP checks if the OffsetSample row exists. Panics on error.
func OffsetSampleExistsGP(ctx context.Context, offset uint) bool {
	e, err := OffsetSampleExists(ctx, boil.GetContextDB(), offset)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// OffsetSampleExists checks if the OffsetSample row exists.
func OffsetSampleExists(ctx context.Context, exec boil.ContextExecutor, offset uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `offset_samples` where `offset`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, offset)
	}
	row := exec.QueryRowContext(ctx, sql, offset)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if offset_samples exists")
	}

	return exists, nil
}
