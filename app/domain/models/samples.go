// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Sample is an object representing the database table.
type Sample struct {
	ID        []byte          `boil:"id" json:"id" toml:"id" yaml:"id"`
	OfficeID  []byte          `boil:"office_id" json:"office_id" toml:"office_id" yaml:"office_id"`
	Title     string          `boil:"title" json:"title" toml:"title" yaml:"title"`
	Category  string          `boil:"category" json:"category" toml:"category" yaml:"category"`
	Memo      string          `boil:"memo" json:"memo" toml:"memo" yaml:"memo"`
	Date      time.Time       `boil:"date" json:"date" toml:"date" yaml:"date"`
	Amount    decimal.Decimal `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	CreatedBy []byte          `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	UpdatedBy []byte          `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`
	CreatedAt time.Time       `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time       `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *sampleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sampleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SampleColumns = struct {
	ID        string
	OfficeID  string
	Title     string
	Category  string
	Memo      string
	Date      string
	Amount    string
	CreatedBy string
	UpdatedBy string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	OfficeID:  "office_id",
	Title:     "title",
	Category:  "category",
	Memo:      "memo",
	Date:      "date",
	Amount:    "amount",
	CreatedBy: "created_by",
	UpdatedBy: "updated_by",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var SampleTableColumns = struct {
	ID        string
	OfficeID  string
	Title     string
	Category  string
	Memo      string
	Date      string
	Amount    string
	CreatedBy string
	UpdatedBy string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "samples.id",
	OfficeID:  "samples.office_id",
	Title:     "samples.title",
	Category:  "samples.category",
	Memo:      "samples.memo",
	Date:      "samples.date",
	Amount:    "samples.amount",
	CreatedBy: "samples.created_by",
	UpdatedBy: "samples.updated_by",
	CreatedAt: "samples.created_at",
	UpdatedAt: "samples.updated_at",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperdecimal_Decimal struct{ field string }

func (w whereHelperdecimal_Decimal) EQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperdecimal_Decimal) NEQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperdecimal_Decimal) LT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperdecimal_Decimal) LTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperdecimal_Decimal) GT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperdecimal_Decimal) GTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var SampleWhere = struct {
	ID        whereHelper__byte
	OfficeID  whereHelper__byte
	Title     whereHelperstring
	Category  whereHelperstring
	Memo      whereHelperstring
	Date      whereHelpertime_Time
	Amount    whereHelperdecimal_Decimal
	CreatedBy whereHelper__byte
	UpdatedBy whereHelper__byte
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelper__byte{field: "`samples`.`id`"},
	OfficeID:  whereHelper__byte{field: "`samples`.`office_id`"},
	Title:     whereHelperstring{field: "`samples`.`title`"},
	Category:  whereHelperstring{field: "`samples`.`category`"},
	Memo:      whereHelperstring{field: "`samples`.`memo`"},
	Date:      whereHelpertime_Time{field: "`samples`.`date`"},
	Amount:    whereHelperdecimal_Decimal{field: "`samples`.`amount`"},
	CreatedBy: whereHelper__byte{field: "`samples`.`created_by`"},
	UpdatedBy: whereHelper__byte{field: "`samples`.`updated_by`"},
	CreatedAt: whereHelpertime_Time{field: "`samples`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`samples`.`updated_at`"},
}

// SampleRels is where relationship names are stored.
var SampleRels = struct {
	CreatedByUser  string
	Office         string
	UpdatedByUser  string
	SampleComments string
}{
	CreatedByUser:  "CreatedByUser",
	Office:         "Office",
	UpdatedByUser:  "UpdatedByUser",
	SampleComments: "SampleComments",
}

// sampleR is where relationships are stored.
type sampleR struct {
	CreatedByUser  *User              `boil:"CreatedByUser" json:"CreatedByUser" toml:"CreatedByUser" yaml:"CreatedByUser"`
	Office         *Office            `boil:"Office" json:"Office" toml:"Office" yaml:"Office"`
	UpdatedByUser  *User              `boil:"UpdatedByUser" json:"UpdatedByUser" toml:"UpdatedByUser" yaml:"UpdatedByUser"`
	SampleComments SampleCommentSlice `boil:"SampleComments" json:"SampleComments" toml:"SampleComments" yaml:"SampleComments"`
}

// NewStruct creates a new relationship struct
func (*sampleR) NewStruct() *sampleR {
	return &sampleR{}
}

// sampleL is where Load methods for each relationship are stored.
type sampleL struct{}

var (
	sampleAllColumns            = []string{"id", "office_id", "title", "category", "memo", "date", "amount", "created_by", "updated_by", "created_at", "updated_at"}
	sampleColumnsWithoutDefault = []string{"id", "office_id", "title", "category", "memo", "date", "amount", "created_by", "updated_by"}
	sampleColumnsWithDefault    = []string{"created_at", "updated_at"}
	samplePrimaryKeyColumns     = []string{"id"}
)

type (
	// SampleSlice is an alias for a slice of pointers to Sample.
	// This should almost always be used instead of []Sample.
	SampleSlice []*Sample
	// SampleHook is the signature for custom Sample hook methods
	SampleHook func(context.Context, boil.ContextExecutor, *Sample) error

	sampleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sampleType                 = reflect.TypeOf(&Sample{})
	sampleMapping              = queries.MakeStructMapping(sampleType)
	samplePrimaryKeyMapping, _ = queries.BindMapping(sampleType, sampleMapping, samplePrimaryKeyColumns)
	sampleInsertCacheMut       sync.RWMutex
	sampleInsertCache          = make(map[string]insertCache)
	sampleUpdateCacheMut       sync.RWMutex
	sampleUpdateCache          = make(map[string]updateCache)
	sampleUpsertCacheMut       sync.RWMutex
	sampleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sampleBeforeInsertHooks []SampleHook
var sampleBeforeUpdateHooks []SampleHook
var sampleBeforeDeleteHooks []SampleHook
var sampleBeforeUpsertHooks []SampleHook

var sampleAfterInsertHooks []SampleHook
var sampleAfterSelectHooks []SampleHook
var sampleAfterUpdateHooks []SampleHook
var sampleAfterDeleteHooks []SampleHook
var sampleAfterUpsertHooks []SampleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Sample) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Sample) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Sample) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Sample) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Sample) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Sample) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Sample) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Sample) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Sample) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSampleHook registers your hook function for all future operations.
func AddSampleHook(hookPoint boil.HookPoint, sampleHook SampleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sampleBeforeInsertHooks = append(sampleBeforeInsertHooks, sampleHook)
	case boil.BeforeUpdateHook:
		sampleBeforeUpdateHooks = append(sampleBeforeUpdateHooks, sampleHook)
	case boil.BeforeDeleteHook:
		sampleBeforeDeleteHooks = append(sampleBeforeDeleteHooks, sampleHook)
	case boil.BeforeUpsertHook:
		sampleBeforeUpsertHooks = append(sampleBeforeUpsertHooks, sampleHook)
	case boil.AfterInsertHook:
		sampleAfterInsertHooks = append(sampleAfterInsertHooks, sampleHook)
	case boil.AfterSelectHook:
		sampleAfterSelectHooks = append(sampleAfterSelectHooks, sampleHook)
	case boil.AfterUpdateHook:
		sampleAfterUpdateHooks = append(sampleAfterUpdateHooks, sampleHook)
	case boil.AfterDeleteHook:
		sampleAfterDeleteHooks = append(sampleAfterDeleteHooks, sampleHook)
	case boil.AfterUpsertHook:
		sampleAfterUpsertHooks = append(sampleAfterUpsertHooks, sampleHook)
	}
}

// One returns a single sample record from the query.
func (q sampleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Sample, error) {
	o := &Sample{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for samples")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Sample records from the query.
func (q sampleQuery) All(ctx context.Context, exec boil.ContextExecutor) (SampleSlice, error) {
	var o []*Sample

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Sample slice")
	}

	if len(sampleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Sample records in the query.
func (q sampleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count samples rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sampleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if samples exists")
	}

	return count > 0, nil
}

// CreatedByUser pointed to by the foreign key.
func (o *Sample) CreatedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CreatedBy),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// Office pointed to by the foreign key.
func (o *Sample) Office(mods ...qm.QueryMod) officeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OfficeID),
	}

	queryMods = append(queryMods, mods...)

	query := Offices(queryMods...)
	queries.SetFrom(query.Query, "`offices`")

	return query
}

// UpdatedByUser pointed to by the foreign key.
func (o *Sample) UpdatedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UpdatedBy),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// SampleComments retrieves all the sample_comment's SampleComments with an executor.
func (o *Sample) SampleComments(mods ...qm.QueryMod) sampleCommentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sample_comments`.`sample_id`=?", o.ID),
	)

	query := SampleComments(queryMods...)
	queries.SetFrom(query.Query, "`sample_comments`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sample_comments`.*"})
	}

	return query
}

// LoadCreatedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sampleL) LoadCreatedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSample interface{}, mods queries.Applicator) error {
	var slice []*Sample
	var object *Sample

	if singular {
		object = maybeSample.(*Sample)
	} else {
		slice = *maybeSample.(*[]*Sample)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sampleR{}
		}
		if !queries.IsNil(object.CreatedBy) {
			args = append(args, object.CreatedBy)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sampleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CreatedBy) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CreatedBy) {
				args = append(args, obj.CreatedBy)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(sampleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedBySamples = append(foreign.R.CreatedBySamples, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreatedBy, foreign.ID) {
				local.R.CreatedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedBySamples = append(foreign.R.CreatedBySamples, local)
				break
			}
		}
	}

	return nil
}

// LoadOffice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sampleL) LoadOffice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSample interface{}, mods queries.Applicator) error {
	var slice []*Sample
	var object *Sample

	if singular {
		object = maybeSample.(*Sample)
	} else {
		slice = *maybeSample.(*[]*Sample)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sampleR{}
		}
		if !queries.IsNil(object.OfficeID) {
			args = append(args, object.OfficeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sampleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OfficeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OfficeID) {
				args = append(args, obj.OfficeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`offices`),
		qm.WhereIn(`offices.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Office")
	}

	var resultSlice []*Office
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Office")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for offices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for offices")
	}

	if len(sampleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Office = foreign
		if foreign.R == nil {
			foreign.R = &officeR{}
		}
		foreign.R.Samples = append(foreign.R.Samples, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OfficeID, foreign.ID) {
				local.R.Office = foreign
				if foreign.R == nil {
					foreign.R = &officeR{}
				}
				foreign.R.Samples = append(foreign.R.Samples, local)
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sampleL) LoadUpdatedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSample interface{}, mods queries.Applicator) error {
	var slice []*Sample
	var object *Sample

	if singular {
		object = maybeSample.(*Sample)
	} else {
		slice = *maybeSample.(*[]*Sample)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sampleR{}
		}
		if !queries.IsNil(object.UpdatedBy) {
			args = append(args, object.UpdatedBy)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sampleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UpdatedBy) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UpdatedBy) {
				args = append(args, obj.UpdatedBy)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(sampleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdatedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UpdatedBySamples = append(foreign.R.UpdatedBySamples, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UpdatedBy, foreign.ID) {
				local.R.UpdatedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedBySamples = append(foreign.R.UpdatedBySamples, local)
				break
			}
		}
	}

	return nil
}

// LoadSampleComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sampleL) LoadSampleComments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSample interface{}, mods queries.Applicator) error {
	var slice []*Sample
	var object *Sample

	if singular {
		object = maybeSample.(*Sample)
	} else {
		slice = *maybeSample.(*[]*Sample)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sampleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sampleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sample_comments`),
		qm.WhereIn(`sample_comments.sample_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sample_comments")
	}

	var resultSlice []*SampleComment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sample_comments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sample_comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sample_comments")
	}

	if len(sampleCommentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SampleComments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sampleCommentR{}
			}
			foreign.R.Sample = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SampleID) {
				local.R.SampleComments = append(local.R.SampleComments, foreign)
				if foreign.R == nil {
					foreign.R = &sampleCommentR{}
				}
				foreign.R.Sample = local
				break
			}
		}
	}

	return nil
}

// SetCreatedByUser of the sample to the related item.
// Sets o.R.CreatedByUser to related.
// Adds o to related.R.CreatedBySamples.
func (o *Sample) SetCreatedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `samples` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"created_by"}),
		strmangle.WhereClause("`", "`", 0, samplePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreatedBy, related.ID)
	if o.R == nil {
		o.R = &sampleR{
			CreatedByUser: related,
		}
	} else {
		o.R.CreatedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedBySamples: SampleSlice{o},
		}
	} else {
		related.R.CreatedBySamples = append(related.R.CreatedBySamples, o)
	}

	return nil
}

// SetOffice of the sample to the related item.
// Sets o.R.Office to related.
// Adds o to related.R.Samples.
func (o *Sample) SetOffice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Office) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `samples` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"office_id"}),
		strmangle.WhereClause("`", "`", 0, samplePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OfficeID, related.ID)
	if o.R == nil {
		o.R = &sampleR{
			Office: related,
		}
	} else {
		o.R.Office = related
	}

	if related.R == nil {
		related.R = &officeR{
			Samples: SampleSlice{o},
		}
	} else {
		related.R.Samples = append(related.R.Samples, o)
	}

	return nil
}

// SetUpdatedByUser of the sample to the related item.
// Sets o.R.UpdatedByUser to related.
// Adds o to related.R.UpdatedBySamples.
func (o *Sample) SetUpdatedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `samples` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"updated_by"}),
		strmangle.WhereClause("`", "`", 0, samplePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UpdatedBy, related.ID)
	if o.R == nil {
		o.R = &sampleR{
			UpdatedByUser: related,
		}
	} else {
		o.R.UpdatedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			UpdatedBySamples: SampleSlice{o},
		}
	} else {
		related.R.UpdatedBySamples = append(related.R.UpdatedBySamples, o)
	}

	return nil
}

// AddSampleComments adds the given related objects to the existing relationships
// of the sample, optionally inserting them as new records.
// Appends related to o.R.SampleComments.
// Sets related.R.Sample appropriately.
func (o *Sample) AddSampleComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SampleComment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SampleID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sample_comments` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"sample_id"}),
				strmangle.WhereClause("`", "`", 0, sampleCommentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SampleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &sampleR{
			SampleComments: related,
		}
	} else {
		o.R.SampleComments = append(o.R.SampleComments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sampleCommentR{
				Sample: o,
			}
		} else {
			rel.R.Sample = o
		}
	}
	return nil
}

// Samples retrieves all the records using an executor.
func Samples(mods ...qm.QueryMod) sampleQuery {
	mods = append(mods, qm.From("`samples`"))
	return sampleQuery{NewQuery(mods...)}
}

// FindSample retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSample(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*Sample, error) {
	sampleObj := &Sample{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `samples` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sampleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from samples")
	}

	if err = sampleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sampleObj, err
	}

	return sampleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Sample) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no samples provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sampleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sampleInsertCacheMut.RLock()
	cache, cached := sampleInsertCache[key]
	sampleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sampleAllColumns,
			sampleColumnsWithDefault,
			sampleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sampleType, sampleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sampleType, sampleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `samples` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `samples` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `samples` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, samplePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into samples")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for samples")
	}

CacheNoHooks:
	if !cached {
		sampleInsertCacheMut.Lock()
		sampleInsertCache[key] = cache
		sampleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Sample.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Sample) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sampleUpdateCacheMut.RLock()
	cache, cached := sampleUpdateCache[key]
	sampleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sampleAllColumns,
			samplePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update samples, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `samples` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, samplePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sampleType, sampleMapping, append(wl, samplePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update samples row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for samples")
	}

	if !cached {
		sampleUpdateCacheMut.Lock()
		sampleUpdateCache[key] = cache
		sampleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sampleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for samples")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for samples")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SampleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), samplePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `samples` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, samplePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sample slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sample")
	}
	return rowsAff, nil
}

var mySQLSampleUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Sample) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no samples provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sampleColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSampleUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sampleUpsertCacheMut.RLock()
	cache, cached := sampleUpsertCache[key]
	sampleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sampleAllColumns,
			sampleColumnsWithDefault,
			sampleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sampleAllColumns,
			samplePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert samples, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`samples`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `samples` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sampleType, sampleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sampleType, sampleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for samples")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sampleType, sampleMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for samples")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for samples")
	}

CacheNoHooks:
	if !cached {
		sampleUpsertCacheMut.Lock()
		sampleUpsertCache[key] = cache
		sampleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Sample record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Sample) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Sample provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), samplePrimaryKeyMapping)
	sql := "DELETE FROM `samples` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from samples")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for samples")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sampleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sampleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from samples")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for samples")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SampleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sampleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), samplePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `samples` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, samplePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sample slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for samples")
	}

	if len(sampleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Sample) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSample(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SampleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SampleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), samplePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `samples`.* FROM `samples` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, samplePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SampleSlice")
	}

	*o = slice

	return nil
}

// SampleExists checks if the Sample row exists.
func SampleExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `samples` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if samples exists")
	}

	return exists, nil
}
