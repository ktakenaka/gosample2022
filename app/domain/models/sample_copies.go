// Code generated by SQLBoiler 4.9.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SampleCopy is an object representing the database table.
type SampleCopy struct {
	ID uint `boil:"id" json:"id" toml:"id" yaml:"id"`
	// use ulid
	Biid      string               `boil:"biid" json:"biid" toml:"biid" yaml:"biid"`
	OfficeID  string               `boil:"office_id" json:"office_id" toml:"office_id" yaml:"office_id"`
	Code      string               `boil:"code" json:"code" toml:"code" yaml:"code"`
	Category  SampleCopiesCategory `boil:"category" json:"category" toml:"category" yaml:"category"`
	Amount    decimal.Decimal      `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	ValidFrom time.Time            `boil:"valid_from" json:"valid_from" toml:"valid_from" yaml:"valid_from"`
	ValidTo   time.Time            `boil:"valid_to" json:"valid_to" toml:"valid_to" yaml:"valid_to"`
	CreatedAt time.Time            `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt null.Time            `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Version   uint8                `boil:"version" json:"version" toml:"version" yaml:"version"`

	R *sampleCopyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sampleCopyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SampleCopyColumns = struct {
	ID        string
	Biid      string
	OfficeID  string
	Code      string
	Category  string
	Amount    string
	ValidFrom string
	ValidTo   string
	CreatedAt string
	DeletedAt string
	Version   string
}{
	ID:        "id",
	Biid:      "biid",
	OfficeID:  "office_id",
	Code:      "code",
	Category:  "category",
	Amount:    "amount",
	ValidFrom: "valid_from",
	ValidTo:   "valid_to",
	CreatedAt: "created_at",
	DeletedAt: "deleted_at",
	Version:   "version",
}

var SampleCopyTableColumns = struct {
	ID        string
	Biid      string
	OfficeID  string
	Code      string
	Category  string
	Amount    string
	ValidFrom string
	ValidTo   string
	CreatedAt string
	DeletedAt string
	Version   string
}{
	ID:        "sample_copies.id",
	Biid:      "sample_copies.biid",
	OfficeID:  "sample_copies.office_id",
	Code:      "sample_copies.code",
	Category:  "sample_copies.category",
	Amount:    "sample_copies.amount",
	ValidFrom: "sample_copies.valid_from",
	ValidTo:   "sample_copies.valid_to",
	CreatedAt: "sample_copies.created_at",
	DeletedAt: "sample_copies.deleted_at",
	Version:   "sample_copies.version",
}

// Generated where

type whereHelperSampleCopiesCategory struct{ field string }

func (w whereHelperSampleCopiesCategory) EQ(x SampleCopiesCategory) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperSampleCopiesCategory) NEQ(x SampleCopiesCategory) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperSampleCopiesCategory) LT(x SampleCopiesCategory) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperSampleCopiesCategory) LTE(x SampleCopiesCategory) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperSampleCopiesCategory) GT(x SampleCopiesCategory) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperSampleCopiesCategory) GTE(x SampleCopiesCategory) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperdecimal_Decimal struct{ field string }

func (w whereHelperdecimal_Decimal) EQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperdecimal_Decimal) NEQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperdecimal_Decimal) LT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperdecimal_Decimal) LTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperdecimal_Decimal) GT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperdecimal_Decimal) GTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperuint8 struct{ field string }

func (w whereHelperuint8) EQ(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint8) NEQ(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint8) LT(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint8) LTE(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint8) GT(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint8) GTE(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint8) IN(slice []uint8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint8) NIN(slice []uint8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var SampleCopyWhere = struct {
	ID        whereHelperuint
	Biid      whereHelperstring
	OfficeID  whereHelperstring
	Code      whereHelperstring
	Category  whereHelperSampleCopiesCategory
	Amount    whereHelperdecimal_Decimal
	ValidFrom whereHelpertime_Time
	ValidTo   whereHelpertime_Time
	CreatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
	Version   whereHelperuint8
}{
	ID:        whereHelperuint{field: "`sample_copies`.`id`"},
	Biid:      whereHelperstring{field: "`sample_copies`.`biid`"},
	OfficeID:  whereHelperstring{field: "`sample_copies`.`office_id`"},
	Code:      whereHelperstring{field: "`sample_copies`.`code`"},
	Category:  whereHelperSampleCopiesCategory{field: "`sample_copies`.`category`"},
	Amount:    whereHelperdecimal_Decimal{field: "`sample_copies`.`amount`"},
	ValidFrom: whereHelpertime_Time{field: "`sample_copies`.`valid_from`"},
	ValidTo:   whereHelpertime_Time{field: "`sample_copies`.`valid_to`"},
	CreatedAt: whereHelpertime_Time{field: "`sample_copies`.`created_at`"},
	DeletedAt: whereHelpernull_Time{field: "`sample_copies`.`deleted_at`"},
	Version:   whereHelperuint8{field: "`sample_copies`.`version`"},
}

// SampleCopyRels is where relationship names are stored.
var SampleCopyRels = struct {
	Office string
}{
	Office: "Office",
}

// sampleCopyR is where relationships are stored.
type sampleCopyR struct {
	Office *Office `boil:"Office" json:"Office" toml:"Office" yaml:"Office"`
}

// NewStruct creates a new relationship struct
func (*sampleCopyR) NewStruct() *sampleCopyR {
	return &sampleCopyR{}
}

// sampleCopyL is where Load methods for each relationship are stored.
type sampleCopyL struct{}

var (
	sampleCopyAllColumns            = []string{"id", "biid", "office_id", "code", "category", "amount", "valid_from", "valid_to", "created_at", "deleted_at", "version"}
	sampleCopyColumnsWithoutDefault = []string{"biid", "office_id", "code", "category", "amount", "valid_from", "created_at", "deleted_at", "version"}
	sampleCopyColumnsWithDefault    = []string{"id", "valid_to"}
	sampleCopyPrimaryKeyColumns     = []string{"id"}
	sampleCopyGeneratedColumns      = []string{}
)

type (
	// SampleCopySlice is an alias for a slice of pointers to SampleCopy.
	// This should almost always be used instead of []SampleCopy.
	SampleCopySlice []*SampleCopy
	// SampleCopyHook is the signature for custom SampleCopy hook methods
	SampleCopyHook func(context.Context, boil.ContextExecutor, *SampleCopy) error

	sampleCopyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sampleCopyType                 = reflect.TypeOf(&SampleCopy{})
	sampleCopyMapping              = queries.MakeStructMapping(sampleCopyType)
	sampleCopyPrimaryKeyMapping, _ = queries.BindMapping(sampleCopyType, sampleCopyMapping, sampleCopyPrimaryKeyColumns)
	sampleCopyInsertCacheMut       sync.RWMutex
	sampleCopyInsertCache          = make(map[string]insertCache)
	sampleCopyUpdateCacheMut       sync.RWMutex
	sampleCopyUpdateCache          = make(map[string]updateCache)
	sampleCopyUpsertCacheMut       sync.RWMutex
	sampleCopyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sampleCopyAfterSelectHooks []SampleCopyHook

var sampleCopyBeforeInsertHooks []SampleCopyHook
var sampleCopyAfterInsertHooks []SampleCopyHook

var sampleCopyBeforeUpdateHooks []SampleCopyHook
var sampleCopyAfterUpdateHooks []SampleCopyHook

var sampleCopyBeforeDeleteHooks []SampleCopyHook
var sampleCopyAfterDeleteHooks []SampleCopyHook

var sampleCopyBeforeUpsertHooks []SampleCopyHook
var sampleCopyAfterUpsertHooks []SampleCopyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SampleCopy) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleCopyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SampleCopy) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleCopyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SampleCopy) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleCopyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SampleCopy) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleCopyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SampleCopy) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleCopyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SampleCopy) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleCopyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SampleCopy) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleCopyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SampleCopy) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleCopyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SampleCopy) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleCopyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSampleCopyHook registers your hook function for all future operations.
func AddSampleCopyHook(hookPoint boil.HookPoint, sampleCopyHook SampleCopyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sampleCopyAfterSelectHooks = append(sampleCopyAfterSelectHooks, sampleCopyHook)
	case boil.BeforeInsertHook:
		sampleCopyBeforeInsertHooks = append(sampleCopyBeforeInsertHooks, sampleCopyHook)
	case boil.AfterInsertHook:
		sampleCopyAfterInsertHooks = append(sampleCopyAfterInsertHooks, sampleCopyHook)
	case boil.BeforeUpdateHook:
		sampleCopyBeforeUpdateHooks = append(sampleCopyBeforeUpdateHooks, sampleCopyHook)
	case boil.AfterUpdateHook:
		sampleCopyAfterUpdateHooks = append(sampleCopyAfterUpdateHooks, sampleCopyHook)
	case boil.BeforeDeleteHook:
		sampleCopyBeforeDeleteHooks = append(sampleCopyBeforeDeleteHooks, sampleCopyHook)
	case boil.AfterDeleteHook:
		sampleCopyAfterDeleteHooks = append(sampleCopyAfterDeleteHooks, sampleCopyHook)
	case boil.BeforeUpsertHook:
		sampleCopyBeforeUpsertHooks = append(sampleCopyBeforeUpsertHooks, sampleCopyHook)
	case boil.AfterUpsertHook:
		sampleCopyAfterUpsertHooks = append(sampleCopyAfterUpsertHooks, sampleCopyHook)
	}
}

// OneG returns a single sampleCopy record from the query using the global executor.
func (q sampleCopyQuery) OneG(ctx context.Context) (*SampleCopy, error) {
	return q.One(ctx, boil.GetContextDB())
}

// OneGP returns a single sampleCopy record from the query using the global executor, and panics on error.
func (q sampleCopyQuery) OneGP(ctx context.Context) *SampleCopy {
	o, err := q.One(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single sampleCopy record from the query, and panics on error.
func (q sampleCopyQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *SampleCopy {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single sampleCopy record from the query.
func (q sampleCopyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SampleCopy, error) {
	o := &SampleCopy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sample_copies")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all SampleCopy records from the query using the global executor.
func (q sampleCopyQuery) AllG(ctx context.Context) (SampleCopySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// AllGP returns all SampleCopy records from the query using the global executor, and panics on error.
func (q sampleCopyQuery) AllGP(ctx context.Context) SampleCopySlice {
	o, err := q.All(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all SampleCopy records from the query, and panics on error.
func (q sampleCopyQuery) AllP(ctx context.Context, exec boil.ContextExecutor) SampleCopySlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all SampleCopy records from the query.
func (q sampleCopyQuery) All(ctx context.Context, exec boil.ContextExecutor) (SampleCopySlice, error) {
	var o []*SampleCopy

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SampleCopy slice")
	}

	if len(sampleCopyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all SampleCopy records in the query using the global executor
func (q sampleCopyQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// CountGP returns the count of all SampleCopy records in the query using the global executor, and panics on error.
func (q sampleCopyQuery) CountGP(ctx context.Context) int64 {
	c, err := q.Count(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all SampleCopy records in the query, and panics on error.
func (q sampleCopyQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all SampleCopy records in the query.
func (q sampleCopyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sample_copies rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q sampleCopyQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q sampleCopyQuery) ExistsGP(ctx context.Context) bool {
	e, err := q.Exists(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q sampleCopyQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q sampleCopyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sample_copies exists")
	}

	return count > 0, nil
}

// Office pointed to by the foreign key.
func (o *SampleCopy) Office(mods ...qm.QueryMod) officeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OfficeID),
	}

	queryMods = append(queryMods, mods...)

	query := Offices(queryMods...)
	queries.SetFrom(query.Query, "`offices`")

	return query
}

// LoadOffice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sampleCopyL) LoadOffice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSampleCopy interface{}, mods queries.Applicator) error {
	var slice []*SampleCopy
	var object *SampleCopy

	if singular {
		object = maybeSampleCopy.(*SampleCopy)
	} else {
		slice = *maybeSampleCopy.(*[]*SampleCopy)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sampleCopyR{}
		}
		args = append(args, object.OfficeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sampleCopyR{}
			}

			for _, a := range args {
				if a == obj.OfficeID {
					continue Outer
				}
			}

			args = append(args, obj.OfficeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`offices`),
		qm.WhereIn(`offices.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Office")
	}

	var resultSlice []*Office
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Office")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for offices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for offices")
	}

	if len(sampleCopyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Office = foreign
		if foreign.R == nil {
			foreign.R = &officeR{}
		}
		foreign.R.SampleCopies = append(foreign.R.SampleCopies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OfficeID == foreign.ID {
				local.R.Office = foreign
				if foreign.R == nil {
					foreign.R = &officeR{}
				}
				foreign.R.SampleCopies = append(foreign.R.SampleCopies, local)
				break
			}
		}
	}

	return nil
}

// SetOfficeG of the sampleCopy to the related item.
// Sets o.R.Office to related.
// Adds o to related.R.SampleCopies.
// Uses the global database handle.
func (o *SampleCopy) SetOfficeG(ctx context.Context, insert bool, related *Office) error {
	return o.SetOffice(ctx, boil.GetContextDB(), insert, related)
}

// SetOfficeP of the sampleCopy to the related item.
// Sets o.R.Office to related.
// Adds o to related.R.SampleCopies.
// Panics on error.
func (o *SampleCopy) SetOfficeP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Office) {
	if err := o.SetOffice(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOfficeGP of the sampleCopy to the related item.
// Sets o.R.Office to related.
// Adds o to related.R.SampleCopies.
// Uses the global database handle and panics on error.
func (o *SampleCopy) SetOfficeGP(ctx context.Context, insert bool, related *Office) {
	if err := o.SetOffice(ctx, boil.GetContextDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOffice of the sampleCopy to the related item.
// Sets o.R.Office to related.
// Adds o to related.R.SampleCopies.
func (o *SampleCopy) SetOffice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Office) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sample_copies` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"office_id"}),
		strmangle.WhereClause("`", "`", 0, sampleCopyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OfficeID = related.ID
	if o.R == nil {
		o.R = &sampleCopyR{
			Office: related,
		}
	} else {
		o.R.Office = related
	}

	if related.R == nil {
		related.R = &officeR{
			SampleCopies: SampleCopySlice{o},
		}
	} else {
		related.R.SampleCopies = append(related.R.SampleCopies, o)
	}

	return nil
}

// SampleCopies retrieves all the records using an executor.
func SampleCopies(mods ...qm.QueryMod) sampleCopyQuery {
	mods = append(mods, qm.From("`sample_copies`"), qmhelper.WhereIsNull("`sample_copies`.`deleted_at`"))
	return sampleCopyQuery{NewQuery(mods...)}
}

// FindSampleCopyG retrieves a single record by ID.
func FindSampleCopyG(ctx context.Context, iD uint, selectCols ...string) (*SampleCopy, error) {
	return FindSampleCopy(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindSampleCopyP retrieves a single record by ID with an executor, and panics on error.
func FindSampleCopyP(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) *SampleCopy {
	retobj, err := FindSampleCopy(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSampleCopyGP retrieves a single record by ID, and panics on error.
func FindSampleCopyGP(ctx context.Context, iD uint, selectCols ...string) *SampleCopy {
	retobj, err := FindSampleCopy(ctx, boil.GetContextDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSampleCopy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSampleCopy(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*SampleCopy, error) {
	sampleCopyObj := &SampleCopy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sample_copies` where `id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sampleCopyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sample_copies")
	}

	if err = sampleCopyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sampleCopyObj, err
	}

	return sampleCopyObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SampleCopy) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *SampleCopy) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *SampleCopy) InsertGP(ctx context.Context, columns boil.Columns) {
	if err := o.Insert(ctx, boil.GetContextDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SampleCopy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sample_copies provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sampleCopyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sampleCopyInsertCacheMut.RLock()
	cache, cached := sampleCopyInsertCache[key]
	sampleCopyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sampleCopyAllColumns,
			sampleCopyColumnsWithDefault,
			sampleCopyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sampleCopyType, sampleCopyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sampleCopyType, sampleCopyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sample_copies` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sample_copies` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sample_copies` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sampleCopyPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sample_copies")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == sampleCopyMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sample_copies")
	}

CacheNoHooks:
	if !cached {
		sampleCopyInsertCacheMut.Lock()
		sampleCopyInsertCache[key] = cache
		sampleCopyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single SampleCopy record using the global executor.
// See Update for more documentation.
func (o *SampleCopy) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// UpdateP uses an executor to update the SampleCopy, and panics on error.
// See Update for more documentation.
func (o *SampleCopy) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single SampleCopy record using the global executor. Panics on error.
// See Update for more documentation.
func (o *SampleCopy) UpdateGP(ctx context.Context, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, boil.GetContextDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the SampleCopy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SampleCopy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sampleCopyUpdateCacheMut.RLock()
	cache, cached := sampleCopyUpdateCache[key]
	sampleCopyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sampleCopyAllColumns,
			sampleCopyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sample_copies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sample_copies` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sampleCopyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sampleCopyType, sampleCopyMapping, append(wl, sampleCopyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sample_copies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sample_copies")
	}

	if !cached {
		sampleCopyUpdateCacheMut.Lock()
		sampleCopyUpdateCache[key] = cache
		sampleCopyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q sampleCopyQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q sampleCopyQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q sampleCopyQuery) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q sampleCopyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sample_copies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sample_copies")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SampleCopySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o SampleCopySlice) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o SampleCopySlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SampleCopySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sampleCopyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sample_copies` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sampleCopyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sampleCopy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sampleCopy")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SampleCopy) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *SampleCopy) UpsertGP(ctx context.Context, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *SampleCopy) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLSampleCopyUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SampleCopy) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sample_copies provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sampleCopyColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSampleCopyUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sampleCopyUpsertCacheMut.RLock()
	cache, cached := sampleCopyUpsertCache[key]
	sampleCopyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sampleCopyAllColumns,
			sampleCopyColumnsWithDefault,
			sampleCopyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sampleCopyAllColumns,
			sampleCopyPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sample_copies, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sample_copies`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sample_copies` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sampleCopyType, sampleCopyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sampleCopyType, sampleCopyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sample_copies")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == sampleCopyMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sampleCopyType, sampleCopyMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sample_copies")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sample_copies")
	}

CacheNoHooks:
	if !cached {
		sampleCopyUpsertCacheMut.Lock()
		sampleCopyUpsertCache[key] = cache
		sampleCopyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single SampleCopy record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SampleCopy) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteP deletes a single SampleCopy record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SampleCopy) DeleteP(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) int64 {
	rowsAff, err := o.Delete(ctx, exec, hardDelete)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single SampleCopy record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SampleCopy) DeleteGP(ctx context.Context, hardDelete bool) int64 {
	rowsAff, err := o.Delete(ctx, boil.GetContextDB(), hardDelete)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single SampleCopy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SampleCopy) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SampleCopy provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sampleCopyPrimaryKeyMapping)
		sql = "DELETE FROM `sample_copies` WHERE `id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `sample_copies` SET %s WHERE `id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(sampleCopyType, sampleCopyMapping, append(wl, sampleCopyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sample_copies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sample_copies")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q sampleCopyQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAllP deletes all rows, and panics on error.
func (q sampleCopyQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec, hardDelete)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows, and panics on error.
func (q sampleCopyQuery) DeleteAllGP(ctx context.Context, hardDelete bool) int64 {
	rowsAff, err := q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q sampleCopyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sampleCopyQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sample_copies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sample_copies")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o SampleCopySlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o SampleCopySlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec, hardDelete)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o SampleCopySlice) DeleteAllGP(ctx context.Context, hardDelete bool) int64 {
	rowsAff, err := o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SampleCopySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sampleCopyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sampleCopyPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `sample_copies` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sampleCopyPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sampleCopyPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `sample_copies` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sampleCopyPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sampleCopy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sample_copies")
	}

	if len(sampleCopyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SampleCopy) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no SampleCopy provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *SampleCopy) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *SampleCopy) ReloadGP(ctx context.Context) {
	if err := o.Reload(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SampleCopy) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSampleCopy(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SampleCopySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty SampleCopySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SampleCopySlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SampleCopySlice) ReloadAllGP(ctx context.Context) {
	if err := o.ReloadAll(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SampleCopySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SampleCopySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sampleCopyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sample_copies`.* FROM `sample_copies` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sampleCopyPrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SampleCopySlice")
	}

	*o = slice

	return nil
}

// SampleCopyExistsG checks if the SampleCopy row exists.
func SampleCopyExistsG(ctx context.Context, iD uint) (bool, error) {
	return SampleCopyExists(ctx, boil.GetContextDB(), iD)
}

// SampleCopyExistsP checks if the SampleCopy row exists. Panics on error.
func SampleCopyExistsP(ctx context.Context, exec boil.ContextExecutor, iD uint) bool {
	e, err := SampleCopyExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// SampleCopyExistsGP checks if the SampleCopy row exists. Panics on error.
func SampleCopyExistsGP(ctx context.Context, iD uint) bool {
	e, err := SampleCopyExists(ctx, boil.GetContextDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// SampleCopyExists checks if the SampleCopy row exists.
func SampleCopyExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sample_copies` where `id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sample_copies exists")
	}

	return exists, nil
}
