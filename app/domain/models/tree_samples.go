// Code generated by SQLBoiler 4.9.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TreeSample is an object representing the database table.
type TreeSample struct {
	ID   uint   `boil:"id" json:"id" toml:"id" yaml:"id"`
	Biid string `boil:"biid" json:"biid" toml:"biid" yaml:"biid"`
	// 50 path at maximum
	Path            string    `boil:"path" json:"path" toml:"path" yaml:"path"`
	OfficeID        string    `boil:"office_id" json:"office_id" toml:"office_id" yaml:"office_id"`
	Name            string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	ValidFrom       time.Time `boil:"valid_from" json:"valid_from" toml:"valid_from" yaml:"valid_from"`
	ValidTo         time.Time `boil:"valid_to" json:"valid_to" toml:"valid_to" yaml:"valid_to"`
	TransactionFrom time.Time `boil:"transaction_from" json:"transaction_from" toml:"transaction_from" yaml:"transaction_from"`
	TransactionTo   time.Time `boil:"transaction_to" json:"transaction_to" toml:"transaction_to" yaml:"transaction_to"`

	R *treeSampleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L treeSampleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TreeSampleColumns = struct {
	ID              string
	Biid            string
	Path            string
	OfficeID        string
	Name            string
	ValidFrom       string
	ValidTo         string
	TransactionFrom string
	TransactionTo   string
}{
	ID:              "id",
	Biid:            "biid",
	Path:            "path",
	OfficeID:        "office_id",
	Name:            "name",
	ValidFrom:       "valid_from",
	ValidTo:         "valid_to",
	TransactionFrom: "transaction_from",
	TransactionTo:   "transaction_to",
}

var TreeSampleTableColumns = struct {
	ID              string
	Biid            string
	Path            string
	OfficeID        string
	Name            string
	ValidFrom       string
	ValidTo         string
	TransactionFrom string
	TransactionTo   string
}{
	ID:              "tree_samples.id",
	Biid:            "tree_samples.biid",
	Path:            "tree_samples.path",
	OfficeID:        "tree_samples.office_id",
	Name:            "tree_samples.name",
	ValidFrom:       "tree_samples.valid_from",
	ValidTo:         "tree_samples.valid_to",
	TransactionFrom: "tree_samples.transaction_from",
	TransactionTo:   "tree_samples.transaction_to",
}

// Generated where

var TreeSampleWhere = struct {
	ID              whereHelperuint
	Biid            whereHelperstring
	Path            whereHelperstring
	OfficeID        whereHelperstring
	Name            whereHelperstring
	ValidFrom       whereHelpertime_Time
	ValidTo         whereHelpertime_Time
	TransactionFrom whereHelpertime_Time
	TransactionTo   whereHelpertime_Time
}{
	ID:              whereHelperuint{field: "`tree_samples`.`id`"},
	Biid:            whereHelperstring{field: "`tree_samples`.`biid`"},
	Path:            whereHelperstring{field: "`tree_samples`.`path`"},
	OfficeID:        whereHelperstring{field: "`tree_samples`.`office_id`"},
	Name:            whereHelperstring{field: "`tree_samples`.`name`"},
	ValidFrom:       whereHelpertime_Time{field: "`tree_samples`.`valid_from`"},
	ValidTo:         whereHelpertime_Time{field: "`tree_samples`.`valid_to`"},
	TransactionFrom: whereHelpertime_Time{field: "`tree_samples`.`transaction_from`"},
	TransactionTo:   whereHelpertime_Time{field: "`tree_samples`.`transaction_to`"},
}

// TreeSampleRels is where relationship names are stored.
var TreeSampleRels = struct {
	Office string
}{
	Office: "Office",
}

// treeSampleR is where relationships are stored.
type treeSampleR struct {
	Office *Office `boil:"Office" json:"Office" toml:"Office" yaml:"Office"`
}

// NewStruct creates a new relationship struct
func (*treeSampleR) NewStruct() *treeSampleR {
	return &treeSampleR{}
}

// treeSampleL is where Load methods for each relationship are stored.
type treeSampleL struct{}

var (
	treeSampleAllColumns            = []string{"id", "biid", "path", "office_id", "name", "valid_from", "valid_to", "transaction_from", "transaction_to"}
	treeSampleColumnsWithoutDefault = []string{"biid", "path", "office_id", "name", "valid_from", "transaction_from"}
	treeSampleColumnsWithDefault    = []string{"id", "valid_to", "transaction_to"}
	treeSamplePrimaryKeyColumns     = []string{"id"}
	treeSampleGeneratedColumns      = []string{}
)

type (
	// TreeSampleSlice is an alias for a slice of pointers to TreeSample.
	// This should almost always be used instead of []TreeSample.
	TreeSampleSlice []*TreeSample
	// TreeSampleHook is the signature for custom TreeSample hook methods
	TreeSampleHook func(context.Context, boil.ContextExecutor, *TreeSample) error

	treeSampleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	treeSampleType                 = reflect.TypeOf(&TreeSample{})
	treeSampleMapping              = queries.MakeStructMapping(treeSampleType)
	treeSamplePrimaryKeyMapping, _ = queries.BindMapping(treeSampleType, treeSampleMapping, treeSamplePrimaryKeyColumns)
	treeSampleInsertCacheMut       sync.RWMutex
	treeSampleInsertCache          = make(map[string]insertCache)
	treeSampleUpdateCacheMut       sync.RWMutex
	treeSampleUpdateCache          = make(map[string]updateCache)
	treeSampleUpsertCacheMut       sync.RWMutex
	treeSampleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var treeSampleAfterSelectHooks []TreeSampleHook

var treeSampleBeforeInsertHooks []TreeSampleHook
var treeSampleAfterInsertHooks []TreeSampleHook

var treeSampleBeforeUpdateHooks []TreeSampleHook
var treeSampleAfterUpdateHooks []TreeSampleHook

var treeSampleBeforeDeleteHooks []TreeSampleHook
var treeSampleAfterDeleteHooks []TreeSampleHook

var treeSampleBeforeUpsertHooks []TreeSampleHook
var treeSampleAfterUpsertHooks []TreeSampleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TreeSample) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range treeSampleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TreeSample) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range treeSampleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TreeSample) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range treeSampleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TreeSample) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range treeSampleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TreeSample) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range treeSampleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TreeSample) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range treeSampleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TreeSample) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range treeSampleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TreeSample) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range treeSampleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TreeSample) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range treeSampleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTreeSampleHook registers your hook function for all future operations.
func AddTreeSampleHook(hookPoint boil.HookPoint, treeSampleHook TreeSampleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		treeSampleAfterSelectHooks = append(treeSampleAfterSelectHooks, treeSampleHook)
	case boil.BeforeInsertHook:
		treeSampleBeforeInsertHooks = append(treeSampleBeforeInsertHooks, treeSampleHook)
	case boil.AfterInsertHook:
		treeSampleAfterInsertHooks = append(treeSampleAfterInsertHooks, treeSampleHook)
	case boil.BeforeUpdateHook:
		treeSampleBeforeUpdateHooks = append(treeSampleBeforeUpdateHooks, treeSampleHook)
	case boil.AfterUpdateHook:
		treeSampleAfterUpdateHooks = append(treeSampleAfterUpdateHooks, treeSampleHook)
	case boil.BeforeDeleteHook:
		treeSampleBeforeDeleteHooks = append(treeSampleBeforeDeleteHooks, treeSampleHook)
	case boil.AfterDeleteHook:
		treeSampleAfterDeleteHooks = append(treeSampleAfterDeleteHooks, treeSampleHook)
	case boil.BeforeUpsertHook:
		treeSampleBeforeUpsertHooks = append(treeSampleBeforeUpsertHooks, treeSampleHook)
	case boil.AfterUpsertHook:
		treeSampleAfterUpsertHooks = append(treeSampleAfterUpsertHooks, treeSampleHook)
	}
}

// OneG returns a single treeSample record from the query using the global executor.
func (q treeSampleQuery) OneG(ctx context.Context) (*TreeSample, error) {
	return q.One(ctx, boil.GetContextDB())
}

// OneGP returns a single treeSample record from the query using the global executor, and panics on error.
func (q treeSampleQuery) OneGP(ctx context.Context) *TreeSample {
	o, err := q.One(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single treeSample record from the query, and panics on error.
func (q treeSampleQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *TreeSample {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single treeSample record from the query.
func (q treeSampleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TreeSample, error) {
	o := &TreeSample{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tree_samples")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TreeSample records from the query using the global executor.
func (q treeSampleQuery) AllG(ctx context.Context) (TreeSampleSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// AllGP returns all TreeSample records from the query using the global executor, and panics on error.
func (q treeSampleQuery) AllGP(ctx context.Context) TreeSampleSlice {
	o, err := q.All(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all TreeSample records from the query, and panics on error.
func (q treeSampleQuery) AllP(ctx context.Context, exec boil.ContextExecutor) TreeSampleSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all TreeSample records from the query.
func (q treeSampleQuery) All(ctx context.Context, exec boil.ContextExecutor) (TreeSampleSlice, error) {
	var o []*TreeSample

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TreeSample slice")
	}

	if len(treeSampleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TreeSample records in the query using the global executor
func (q treeSampleQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// CountGP returns the count of all TreeSample records in the query using the global executor, and panics on error.
func (q treeSampleQuery) CountGP(ctx context.Context) int64 {
	c, err := q.Count(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all TreeSample records in the query, and panics on error.
func (q treeSampleQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all TreeSample records in the query.
func (q treeSampleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tree_samples rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q treeSampleQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q treeSampleQuery) ExistsGP(ctx context.Context) bool {
	e, err := q.Exists(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q treeSampleQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q treeSampleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tree_samples exists")
	}

	return count > 0, nil
}

// Office pointed to by the foreign key.
func (o *TreeSample) Office(mods ...qm.QueryMod) officeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OfficeID),
	}

	queryMods = append(queryMods, mods...)

	query := Offices(queryMods...)
	queries.SetFrom(query.Query, "`offices`")

	return query
}

// LoadOffice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (treeSampleL) LoadOffice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTreeSample interface{}, mods queries.Applicator) error {
	var slice []*TreeSample
	var object *TreeSample

	if singular {
		object = maybeTreeSample.(*TreeSample)
	} else {
		slice = *maybeTreeSample.(*[]*TreeSample)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &treeSampleR{}
		}
		args = append(args, object.OfficeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &treeSampleR{}
			}

			for _, a := range args {
				if a == obj.OfficeID {
					continue Outer
				}
			}

			args = append(args, obj.OfficeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`offices`),
		qm.WhereIn(`offices.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Office")
	}

	var resultSlice []*Office
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Office")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for offices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for offices")
	}

	if len(treeSampleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Office = foreign
		if foreign.R == nil {
			foreign.R = &officeR{}
		}
		foreign.R.TreeSamples = append(foreign.R.TreeSamples, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OfficeID == foreign.ID {
				local.R.Office = foreign
				if foreign.R == nil {
					foreign.R = &officeR{}
				}
				foreign.R.TreeSamples = append(foreign.R.TreeSamples, local)
				break
			}
		}
	}

	return nil
}

// SetOfficeG of the treeSample to the related item.
// Sets o.R.Office to related.
// Adds o to related.R.TreeSamples.
// Uses the global database handle.
func (o *TreeSample) SetOfficeG(ctx context.Context, insert bool, related *Office) error {
	return o.SetOffice(ctx, boil.GetContextDB(), insert, related)
}

// SetOfficeP of the treeSample to the related item.
// Sets o.R.Office to related.
// Adds o to related.R.TreeSamples.
// Panics on error.
func (o *TreeSample) SetOfficeP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Office) {
	if err := o.SetOffice(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOfficeGP of the treeSample to the related item.
// Sets o.R.Office to related.
// Adds o to related.R.TreeSamples.
// Uses the global database handle and panics on error.
func (o *TreeSample) SetOfficeGP(ctx context.Context, insert bool, related *Office) {
	if err := o.SetOffice(ctx, boil.GetContextDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOffice of the treeSample to the related item.
// Sets o.R.Office to related.
// Adds o to related.R.TreeSamples.
func (o *TreeSample) SetOffice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Office) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `tree_samples` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"office_id"}),
		strmangle.WhereClause("`", "`", 0, treeSamplePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OfficeID = related.ID
	if o.R == nil {
		o.R = &treeSampleR{
			Office: related,
		}
	} else {
		o.R.Office = related
	}

	if related.R == nil {
		related.R = &officeR{
			TreeSamples: TreeSampleSlice{o},
		}
	} else {
		related.R.TreeSamples = append(related.R.TreeSamples, o)
	}

	return nil
}

// TreeSamples retrieves all the records using an executor.
func TreeSamples(mods ...qm.QueryMod) treeSampleQuery {
	mods = append(mods, qm.From("`tree_samples`"))
	return treeSampleQuery{NewQuery(mods...)}
}

// FindTreeSampleG retrieves a single record by ID.
func FindTreeSampleG(ctx context.Context, iD uint, selectCols ...string) (*TreeSample, error) {
	return FindTreeSample(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTreeSampleP retrieves a single record by ID with an executor, and panics on error.
func FindTreeSampleP(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) *TreeSample {
	retobj, err := FindTreeSample(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTreeSampleGP retrieves a single record by ID, and panics on error.
func FindTreeSampleGP(ctx context.Context, iD uint, selectCols ...string) *TreeSample {
	retobj, err := FindTreeSample(ctx, boil.GetContextDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTreeSample retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTreeSample(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*TreeSample, error) {
	treeSampleObj := &TreeSample{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `tree_samples` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, treeSampleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tree_samples")
	}

	if err = treeSampleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return treeSampleObj, err
	}

	return treeSampleObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TreeSample) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *TreeSample) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *TreeSample) InsertGP(ctx context.Context, columns boil.Columns) {
	if err := o.Insert(ctx, boil.GetContextDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TreeSample) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tree_samples provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(treeSampleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	treeSampleInsertCacheMut.RLock()
	cache, cached := treeSampleInsertCache[key]
	treeSampleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			treeSampleAllColumns,
			treeSampleColumnsWithDefault,
			treeSampleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(treeSampleType, treeSampleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(treeSampleType, treeSampleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `tree_samples` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `tree_samples` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `tree_samples` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, treeSamplePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tree_samples")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == treeSampleMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for tree_samples")
	}

CacheNoHooks:
	if !cached {
		treeSampleInsertCacheMut.Lock()
		treeSampleInsertCache[key] = cache
		treeSampleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TreeSample record using the global executor.
// See Update for more documentation.
func (o *TreeSample) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// UpdateP uses an executor to update the TreeSample, and panics on error.
// See Update for more documentation.
func (o *TreeSample) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single TreeSample record using the global executor. Panics on error.
// See Update for more documentation.
func (o *TreeSample) UpdateGP(ctx context.Context, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, boil.GetContextDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the TreeSample.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TreeSample) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	treeSampleUpdateCacheMut.RLock()
	cache, cached := treeSampleUpdateCache[key]
	treeSampleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			treeSampleAllColumns,
			treeSamplePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tree_samples, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `tree_samples` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, treeSamplePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(treeSampleType, treeSampleMapping, append(wl, treeSamplePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tree_samples row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tree_samples")
	}

	if !cached {
		treeSampleUpdateCacheMut.Lock()
		treeSampleUpdateCache[key] = cache
		treeSampleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q treeSampleQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q treeSampleQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q treeSampleQuery) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q treeSampleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tree_samples")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tree_samples")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TreeSampleSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TreeSampleSlice) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TreeSampleSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TreeSampleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), treeSamplePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `tree_samples` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, treeSamplePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in treeSample slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all treeSample")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TreeSample) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *TreeSample) UpsertGP(ctx context.Context, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *TreeSample) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLTreeSampleUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TreeSample) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tree_samples provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(treeSampleColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTreeSampleUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	treeSampleUpsertCacheMut.RLock()
	cache, cached := treeSampleUpsertCache[key]
	treeSampleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			treeSampleAllColumns,
			treeSampleColumnsWithDefault,
			treeSampleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			treeSampleAllColumns,
			treeSamplePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert tree_samples, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`tree_samples`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `tree_samples` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(treeSampleType, treeSampleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(treeSampleType, treeSampleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for tree_samples")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == treeSampleMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(treeSampleType, treeSampleMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for tree_samples")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for tree_samples")
	}

CacheNoHooks:
	if !cached {
		treeSampleUpsertCacheMut.Lock()
		treeSampleUpsertCache[key] = cache
		treeSampleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TreeSample record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TreeSample) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// DeleteP deletes a single TreeSample record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TreeSample) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single TreeSample record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TreeSample) DeleteGP(ctx context.Context) int64 {
	rowsAff, err := o.Delete(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single TreeSample record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TreeSample) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TreeSample provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), treeSamplePrimaryKeyMapping)
	sql := "DELETE FROM `tree_samples` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tree_samples")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tree_samples")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q treeSampleQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q treeSampleQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows, and panics on error.
func (q treeSampleQuery) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := q.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q treeSampleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no treeSampleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tree_samples")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tree_samples")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TreeSampleSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TreeSampleSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TreeSampleSlice) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := o.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TreeSampleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(treeSampleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), treeSamplePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `tree_samples` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, treeSamplePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from treeSample slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tree_samples")
	}

	if len(treeSampleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TreeSample) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no TreeSample provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *TreeSample) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *TreeSample) ReloadGP(ctx context.Context) {
	if err := o.Reload(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TreeSample) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTreeSample(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TreeSampleSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty TreeSampleSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TreeSampleSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TreeSampleSlice) ReloadAllGP(ctx context.Context) {
	if err := o.ReloadAll(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TreeSampleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TreeSampleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), treeSamplePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `tree_samples`.* FROM `tree_samples` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, treeSamplePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TreeSampleSlice")
	}

	*o = slice

	return nil
}

// TreeSampleExistsG checks if the TreeSample row exists.
func TreeSampleExistsG(ctx context.Context, iD uint) (bool, error) {
	return TreeSampleExists(ctx, boil.GetContextDB(), iD)
}

// TreeSampleExistsP checks if the TreeSample row exists. Panics on error.
func TreeSampleExistsP(ctx context.Context, exec boil.ContextExecutor, iD uint) bool {
	e, err := TreeSampleExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TreeSampleExistsGP checks if the TreeSample row exists. Panics on error.
func TreeSampleExistsGP(ctx context.Context, iD uint) bool {
	e, err := TreeSampleExists(ctx, boil.GetContextDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TreeSampleExists checks if the TreeSample row exists.
func TreeSampleExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `tree_samples` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tree_samples exists")
	}

	return exists, nil
}
